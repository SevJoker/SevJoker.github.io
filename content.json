{"meta":{"title":"Seven's Blog","subtitle":"seven","description":"it blog","author":"SevenDing","url":"http://sevjoker.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-10-13T10:28:14.207Z","updated":"2019-10-13T10:28:14.207Z","comments":false,"path":"/404.html","permalink":"http://sevjoker.github.io//404.html","excerpt":"","text":""},{"title":"关于","date":"2019-10-13T10:28:14.208Z","updated":"2019-10-13T10:28:14.208Z","comments":false,"path":"about/index.html","permalink":"http://sevjoker.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2019-10-13T10:28:14.208Z","updated":"2019-10-13T10:28:14.208Z","comments":false,"path":"books/index.html","permalink":"http://sevjoker.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-10-13T10:28:14.208Z","updated":"2019-10-13T10:28:14.208Z","comments":false,"path":"categories/index.html","permalink":"http://sevjoker.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-10-13T10:28:14.209Z","updated":"2019-10-13T10:28:14.209Z","comments":true,"path":"links/index.html","permalink":"http://sevjoker.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-10-13T10:28:14.209Z","updated":"2019-10-13T10:28:14.209Z","comments":false,"path":"repository/index.html","permalink":"http://sevjoker.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-10-13T10:28:14.209Z","updated":"2019-10-13T10:28:14.209Z","comments":false,"path":"tags/index.html","permalink":"http://sevjoker.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"消失的panic","slug":"gopanic","date":"2019-10-13T16:08:08.000Z","updated":"2019-10-13T16:14:02.050Z","comments":true,"path":"2019/10/14/gopanic/","link":"","permalink":"http://sevjoker.github.io/2019/10/14/gopanic/","excerpt":"","text":"消失的panic现场线上运行142行 报panic线下模拟不复现线上模拟不复现复现之旅并发压测尝试后发现会出现这种case问题发现之旅尝试1第一认知 以为panic的原因是MultiDayTypeConfig 或者 MultiDayTypeConfig.d 为nil，故在程序中打印这两个值，看是否有nil，并发压测复现问题未曾发现log中有任何 nil输出失败尝试2怀疑是否会有并发读写该值的情况导致nil，故将程序中所有关于该值得写入口注释（除了程序启动时），并发测试，panic依旧失败尝试3因为涉及并发，考虑可能会牵扯数据竞争问题, 所以编译时加入 -race 参数看改值是否存在竞争情况，并发模拟，data race log比较多，过滤筛选并未发现 MultiDayTypeConfig相关的日志，而且加race参数后 协程数量不可超过8192，此时未复现问题，（log中有 不少关于 context.TripCountry 的日志）失败尝试4抱着试一试的心态，当时以为会不会是 interface 在层层函数传递时候发生了意料之外的情况，将函数改写如下并发模拟 未复现问题 （amazing）瞎猫碰到死耗子尝试5认为这个毫无道理可言，而且这么改写也不科学，继续挖。看着data race的log，突发尝试，将context的TripCountry得修改放在并发外并发模拟尝试，未复现问题bug 修复But 可是并发写入string 理论上并不会crash，而且最终的nil造成原因我们还是一无所知黎明前意外之喜偶然尝试 在GetDayTypeByMemory 中添加recover 尝试捕获第一现场，在recover中打印 MultiDayTypeConfig.d MultiDayTypeConfig 及 countryCode，将外层的recover 去除，目的是为了并发下打印污染，希望能直接看到panic现场内容意外发现 recover中的 fmt.Println 二次panic分开打印，居然发现是打印 countryCode 的时候 panicWhat the fxxk！！！！漫漫猜测路大概了解了一下golang string 运行时底层本质上是这么一个结构1234type StringHeader struct &#123; Data uintptr Len int&#125;Data代表string数据的首地址，len 代表字节长度猜测1怀疑在并发写入这个string的时候，协程1传递到函数的值 被协程2修改导致协程1 的string被gc（理论上这个时候协程1的值有句柄在函数栈上，不过数据存在堆上，到底会不会被gc，值得试一下），线下写了一个并发写入string 主动调用gc的 demo并不能复现 panic失败继续尝试考虑是否可以打印 countryCode 的首地址，看是否有变化及差异。代码如下所示复现问题后输出如下所示-------------------------------------data:00000000-------len:2OMG！！！数据地址为空？ 长度为不为0 ？？？？这个地方就解释了为啥 fmt 也会nil panic这个string 只要涉及取值操作就回 nil panic线下模拟并发写入struct的string再输出模拟失败（中间尝试切换go版本保证线下线上环境一致均失败）ok panic中间还有个小误会，开始用1.8 跑的时候 跑了好久没panic 以为版本差异会导致panic后来才发现 1.8 只不过稳定的时候长很多，panic该来还是会来的后续汇编分析Len Data 分开赋值 多条指令。并发场景并不安全简化版本处理结论并发场景赋值的不安全性学习巩固知识点golang 的 stringgolang gc堆与栈golang data race","categories":[{"name":"技术","slug":"技术","permalink":"http://sevjoker.github.io/categories/技术/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://sevjoker.github.io/tags/golang/"}]},{"title":"myself","slug":"myself","date":"2019-10-13T15:31:04.000Z","updated":"2019-10-13T16:05:17.181Z","comments":true,"path":"2019/10/13/myself/","link":"","permalink":"http://sevjoker.github.io/2019/10/13/myself/","excerpt":"","text":"myself当我回首往事的时候，不会因虚度年华而悔恨，也不会因碌碌无为而羞愧！回首https://www.processon.com/view/link/5da344f7e4b0ece757c9c6a0展望我一直崇尚自由，然鹅却浑身不自在，或许应该做出点改变。。。。。也许真的自律方可自由要有靶心才能射箭，想了下，我想做个什么样的人，我希望自己能做一个有独立思想的人，对事对物都有自己的认识，有自己的底线，在这个认识和底线下我是自由的","categories":[{"name":"生活","slug":"生活","permalink":"http://sevjoker.github.io/categories/生活/"}],"tags":[{"name":"自省","slug":"自省","permalink":"http://sevjoker.github.io/tags/自省/"}]},{"title":"http长连接","slug":"长连接","date":"2019-10-13T14:40:49.000Z","updated":"2019-10-13T14:44:27.617Z","comments":true,"path":"2019/10/13/长连接/","link":"","permalink":"http://sevjoker.github.io/2019/10/13/长连接/","excerpt":"","text":"http长连接http特点简单快速灵活无连接 *限制每次连接只处理一个请求用完即断 （后期加入）无状态 *协议对于事务处理没有记忆能力每个请求都是独立的借助 Cookie Session 完成上下文联系支持B/S(Browser/Server) 及C/S(Client/Serve)模式Q 无连接的特性如何实现 长连接网络协议分层简介http 之 Keep-alive上图我们可以知道http 基于 tcp 协议。虽然http本身是无连接的，不过tcp是协议是完全面向连接具有强可靠性。故可以通过复用tcp连接的方式实现所谓的http长连接即HTTP长连接和短连接本质上是TCP长连接 和 短连接（握手说句话再见）实验模型基于 nginx 的 keepAlive 实验该场景下有两个地方可以完成http长连接配置针对10.10.7.179 &lt; - &gt; 10.9.71.78 进行分析抓包分析看包 说话短连接 不复用demo_no_keepalive_simple.cap长连接 复用tcp连接demo_keepalive_simple.cap小节nginx http长连接 配置netstat -nat | grep -i “10.9.71.78:6601”观察不同配置下tcp连接的不同变化upstream module 中location module 中http module 中按需配置####性能对比统一 nginx 单worker, server为简单的hello world服务禁用长连接启用http 长连接性能差异 达到 70%+ （这个压测结果应该算是极限差距吧。按server耗时与传输占比来算）适用场景长连接多用于操作频繁，点对点的通讯，而且连接数不能太多情况WEB网站的http服务一般都用短链接选则法则：面向”用户多少”选择","categories":[{"name":"技术","slug":"技术","permalink":"http://sevjoker.github.io/categories/技术/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://sevjoker.github.io/tags/golang/"}]},{"title":"hexo踩坑","slug":"hexo踩坑","date":"2019-10-13T13:51:09.000Z","updated":"2019-10-13T15:30:43.550Z","comments":true,"path":"2019/10/13/hexo踩坑/","link":"","permalink":"http://sevjoker.github.io/2019/10/13/hexo踩坑/","excerpt":"","text":"hexo年关将至，目标还差的很远啊~~~简单整理一下这些年自己的经历画成图谱（后续完善细节）嗯，发现可以做，要做的事有好多好多，多想能活500年哇慢慢来吧，先把blog捡起来。。。。。把 hexo 的坑统一汇总下，之前搞懂了又忘了。。。。。hexo 简介写blog的神器，看中了他兼容markdown语法且github托管hexo基于nodejs，将markdown可以直接编译成html，同时支持直接托管到github上，所以hexo的包管理均由npm管理。hexo托管git需要绑定name.github.io的仓库，托管后改仓库的master即为编译后的html文件。环境保存方案name.github.io 代码库 新建一个分支，存储所有文件，提交。所以仓库结构就是master 托管 编译完的html文件，由hexo命令管理新建分支托管其他所有文件，有git命令管理命令相关hexo清理本地空间 hexo clean编译生成html hexo g本地服务 hexo s发布托管到git hexo d一键部署命令(编译并发布) hexo g -dnpm包管理检测本地js包情况 npm ls --depth 0下载安装 npm install packagename --save检测项目依赖中的漏洞并自动安装 npm audit fix报错处理git 提交失败https 改为 git模式push","categories":[{"name":"技术","slug":"技术","permalink":"http://sevjoker.github.io/categories/技术/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://sevjoker.github.io/tags/blog/"}]},{"title":"golang踩坑","slug":"golang踩坑","date":"2019-04-20T17:54:02.000Z","updated":"2019-10-13T14:05:40.629Z","comments":true,"path":"2019/04/21/golang踩坑/","link":"","permalink":"http://sevjoker.github.io/2019/04/21/golang踩坑/","excerpt":"","text":"golang 线上问题汇总定时器现象线上cpu不定时抖动问题发现大量go协程启用了NewTicker 而未主动关闭，而ticker对象会默认存储在一个最小堆上，todo问题总结time.After vs time.NewTicker 区分使用concurrent map iteration and map write现象线上服务直接崩溃问题发现并发读写map引起不是一个panic 无法被 recoverThis means that the Go runtime may detect if a map is read or modified in a goroutine, and it is also modified by another goroutine, concurrently, without synchronization.问题解决锁处理sync.Map问题衍生当一个 map被json encode时也会导致此问题（等同于读操作）问题复原及深究单层map123456789101112131415161718192021222324252627282930313233343536package mainimport ( &quot;time&quot; &quot;fmt&quot; &quot;sync&quot;)var m = make(map[string]string) //wrongvar sm = &amp;sync.Map&#123;&#125; // rightfunc main() &#123; sm.Store(&quot;x&quot;,&quot;aaa&quot;) m[&quot;x&quot;] = &quot;aaa&quot; sm.Store(&quot;x&quot;, m) go func() &#123; if err1 := recover(); err1 != nil &#123; return &#125; for &#123; m[&quot;x&quot;] = &quot;xxxx&quot; // sm.Store(&quot;x&quot;,&quot;bbbb&quot;) &#125; &#125;() go func() &#123; if err1 := recover(); err1 != nil &#123; return &#125; for &#123; _ = m[&quot;x&quot;] // v,ok := sm.Load(&quot;x&quot;) // sm.Store(&quot;x&quot;,&quot;bbbb&quot;) // fmt.Println(v,ok) &#125; &#125;() fmt.Println(&quot;----&quot;) time.Sleep(1 * time.Second)&#125;当写map时 无论并发去读还是去写都会fatal 且无法被捕获可用sync.Map 绝对安全多层map1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package mainimport ( &quot;time&quot; &quot;sync&quot; // &quot;fmt&quot;)type AA struct &#123; mu *sync.Mutex aa map[string]map[string]int&#125;func (a *AA)set(b int) &#123; a.mu.Lock() defer a.mu.Unlock() a.aa[&quot;aaa&quot;][&quot;aaa&quot;] = b&#125;func (a *AA)get() map[string]int &#123; a.mu.Lock() defer a.mu.Unlock() return a.aa[&quot;aaa&quot;] &#125;var sm = &amp;sync.Map&#123;&#125; func main() &#123; sm.Store(&quot;aaa&quot;,map[string]string&#123;&quot;aaa&quot;:&quot;aaa&quot;&#125;) // a := &amp;AA&#123;aa:map[string]map[string]int&#123;&quot;aaa&quot;:map[string]int&#123;&quot;aaa&quot;:1&#125;&#125;,mu:new(sync.Mutex)&#125; go func() &#123; if err1 := recover(); err1 != nil &#123; return &#125; for &#123; // a.set(123) v,_ := sm.Load(&quot;aaa&quot;) v1 := v.(map[string]string) // fmt.Println(v,v1,ok) v1[&quot;aaa&quot;] = &quot;bbb&quot; &#125; &#125;() go func() &#123; if err1 := recover(); err1 != nil &#123; return &#125; for &#123; // v := a.get() // _ = v[&quot;aaa&quot;] // v,ok := sm.Load(&quot;x&quot;) // sm.Store(&quot;x&quot;,&quot;bbbb&quot;) // fmt.Println(v,ok) v,_ := sm.Load(&quot;aaa&quot;) v1 := v.(map[string]string) // _ = v1[&quot;&quot;] _ = v1[&quot;aaa&quot;] // fmt.Sprintln(&quot;111&quot;,v1) // fmt.Println(v,v1,ok) &#125; &#125;() time.Sleep(10 * time.Second)&#125;多层map 无论是锁还是sync.Map都无可避免的会出现将底层的map句柄暴露给上层，继而引发同时读写错误结论当你操作的map可能存在同时读写的情况下就必须加锁读写操作必须都加锁即 存在数据竞争的map引用不可暴露给上层","categories":[{"name":"技术","slug":"技术","permalink":"http://sevjoker.github.io/categories/技术/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://sevjoker.github.io/tags/golang/"}]},{"title":"开卷有益","slug":"first","date":"2019-04-13T16:27:46.000Z","updated":"2019-10-13T14:10:59.058Z","comments":true,"path":"2019/04/14/first/","link":"","permalink":"http://sevjoker.github.io/2019/04/14/first/","excerpt":"","text":"随便记点啦好记忆不如烂笔头 何况如此懒得记东西的我1$ hello blog!立个flag每月至少一篇blog (all type)good good study, day day upyou need to know what are you doing ha~打卡健身2019-04-20LOL2019-04-202019-04-252019-05-012019-10-082019-10-09TODO2019-04-22 golang deadline 寻密鸡汤没有人会为你真正的价值买单，他们只会为他们所认为的你的价值买单","categories":[{"name":"随便记","slug":"随便记","permalink":"http://sevjoker.github.io/categories/随便记/"}],"tags":[{"name":"随记","slug":"随记","permalink":"http://sevjoker.github.io/tags/随记/"}]}]}