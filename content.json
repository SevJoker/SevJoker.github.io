{"meta":{"title":"Seven's Blog","subtitle":"seven","description":"it blog","author":"SevenDing","url":"http://sevjoker.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-10-13T10:28:14.207Z","updated":"2019-10-13T10:28:14.207Z","comments":false,"path":"/404.html","permalink":"http://sevjoker.github.io//404.html","excerpt":"","text":""},{"title":"关于","date":"2019-10-13T10:28:14.208Z","updated":"2019-10-13T10:28:14.208Z","comments":false,"path":"about/index.html","permalink":"http://sevjoker.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2019-10-13T10:28:14.208Z","updated":"2019-10-13T10:28:14.208Z","comments":false,"path":"books/index.html","permalink":"http://sevjoker.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-10-13T10:28:14.208Z","updated":"2019-10-13T10:28:14.208Z","comments":false,"path":"categories/index.html","permalink":"http://sevjoker.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-10-13T10:28:14.209Z","updated":"2019-10-13T10:28:14.209Z","comments":true,"path":"links/index.html","permalink":"http://sevjoker.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-10-13T10:28:14.209Z","updated":"2019-10-13T10:28:14.209Z","comments":false,"path":"repository/index.html","permalink":"http://sevjoker.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-10-13T10:28:14.209Z","updated":"2019-10-13T10:28:14.209Z","comments":false,"path":"tags/index.html","permalink":"http://sevjoker.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"redis集群踩坑","slug":"redis集群踩坑","date":"2019-11-17T15:20:37.000Z","updated":"2019-11-20T16:59:10.428Z","comments":true,"path":"2019/11/17/redis集群踩坑/","link":"","permalink":"http://sevjoker.github.io/2019/11/17/redis集群踩坑/","excerpt":"","text":"redis集群踩坑现场公司MVP项目线下测试通过，线上部署时，联调会有以下报错crossslot keys in request don&#39;t hash to the same slot现场相关环境依赖线上redis集群版本4.0（redis-cluster架构）plutus极简版本（lua操作）线下redis单机版plutus(lua操作redis)问题追踪google发现大概了解了错误原因是redis-cluster集群会进行拟槽分区（slot），所有的键根据哈希函数映射到0~16383整数槽内，计算公式：slot=CRC16（key）&amp;16383每一个节点负责维护一部分槽以及槽所映射的键值数据redis集群执行命令是会先计算key值的所属槽区，再将请求打到指定节点由该节点操作多key的情况下，redis集群节点会检测多key的hash值是否命中同一个slot，如果未能命中同一key则会爆上述错误redis-cluster架构图如下代码分析项目中运用了以下lua代码嵌入redis执行12345678910local version = nilversion = redis.call(&quot;HGET&quot;, KEYS[1], ARGV[1]);if version and version ~= ARGV[2] then return 1else ARGV[2] = tonumber(ARGV[2]) + 1end;redis.call(&quot;HMSET&quot;, KEYS[1], unpack(ARGV));redis.call(&quot;EXPIRE&quot;, KEYS[1], KEYS[2]);return 0注其中KEYS 代表输入的redis key数组 ；ARGV 代表输入redis 参数value数组关于redis与lua的应用原理https://juejin.im/post/5bce7e9fe51d457a772bcfc6本质就是运用了redis的 eval 命令这个地方输入是多参数的（key多个），redis-cluster收到key list后会进行hash取slot操作，线上联调的运行实例中未能命中同一个slot，故报错比较尴尬的是当时我线上测试的case 刚好能命中同一个slot，未能发现问题，囧修复官方手段针对多key的执行问题，官方提供的方式是可以针对多key 进行{}包裹处理，集群就可以统一取该标识符里的字符串取slot，这样能保证命中的slot的一致的。注意，redis的key里还是不要使用{}字符比较好，不然可能会导致slot分配不均匀相关实例操作如下我的选择该场景将过期时延用来做第二个key，如果采取包裹处理，则还需要在lua里做字符操作，如果都取一个常量则会导致 slot 分配不均匀这边可以将起异步化，EXPIRE 操作可以等lua脚本执行完，再单独执行。觉得拆两步不好，不优雅 又改了一版12345678910111213local version = nillocal expire = nilversion = redis.call(&quot;HGET&quot;, KEYS[1], ARGV[2]);if version and version ~= ARGV[3] then return 1else ARGV[3] = tonumber(ARGV[3]) + 1end;expire = ARGV[1]table.remove(ARGV, 1)redis.call(&quot;HMSET&quot;, KEYS[1], unpack(ARGV));redis.call(&quot;EXPIRE&quot;, KEYS[1], expire);return 0延伸极简版本是对plutus的缩减版本，redis存储这个地方工期等因素影响，并未修改，而我们线上也未出现类似错误，于是需要去研究一下codis集群设置codiscodis是开源的一个redis集群方案，公司做了很多优化，架构层面应该是类似的。值得一提的是，codis对于lua多key操作会以第一个key为准，只会讲lua发送到第一个key所属的redis实例运行这里就解释了我们线上是运行正常的需要注意的是同时操作多key时，需要对这个概率有所理解，不然会导致key操作失败kediskedis是公司自研的redis集群方案，基于redis-cluster架构封装的，与redis-cluster结构类似，外面引入了一层 proxy注 后续如需升级为kedis，则需要注意多key写入的slot检测问题，kedis童鞋说是可以配置选择的","categories":[],"tags":[]},{"title":"浮生日记","slug":"浮生日记","date":"2019-10-20T09:27:26.000Z","updated":"2019-11-17T15:21:42.849Z","comments":true,"path":"2019/10/20/浮生日记/","link":"","permalink":"http://sevjoker.github.io/2019/10/20/浮生日记/","excerpt":"","text":"浮生日记回首往事，不因老年痴呆而忘了自己活过记录自己周末生活的点点滴滴，有感觉可单开记录是为了自己能记住，可以骄傲，可以羞愧2019-10-20行程概况昨天参加秀酱的婚礼，婚礼算是我参加过有史以来最高端的呢，有牌面的呀，当时觉得，嗯，要有钱啊，要牛逼啊11点才起，出门，吃了个午饭，理了个发，溜了个湾，找了两家店去买头盔，看着还行，不过还是没买，其实终究是一个定位问题，我不知道买这个盔的预支是多少，也许我可以试着顶一下自己的收支目标，这样买东西就有预支等一系列参考了，这样就不用选择困难正常shopping啦12342. 遛弯回来之后看了会lol视频，同时偶儿玩下游戏，偶儿随便找妹子尬聊一下3. 和李哥打了个电话，聊了下最近安排与成都计划，后来与二舅又聊了下这个计划，被强烈不建议，导致我很是不确定，**他的意思是现在不是考虑住房的时候，我应该优先找对象，这才是重重之重**3. 晚上去找了李老板吃饭，居然没肉，我的天啊，不过吃的还可以，聊的也很不错。李老板最近状态很不错看着，和小四和我说的情况如此类似，经历了漫长的磨合过程，他们夫妻步调一致是多么幸福，同时还说了我父母好，算是难得了~~~~ojbk吧4. 吃完回来10点了，继续看会lol直播，本周末就过去了呀感想看秀酱的婚礼有感，嗯，我要努力往上冲一冲，就算我不行，我后代也让他可以享受这个 –正能量培育白天的一天随机而变，没有安排就导致无事发生了呀 — 要安排自己与李老板聊天，那一个时刻有着对爸妈的感谢，深深的感谢 记住那一刻的感觉—感恩双11 购买清单 倒是有了一些智能音箱头盔要是这两天还没买 l 码买几本书吧买衣架或者衣娄打分75分吧2019-10-28一周概况本周值周，感觉节奏很乱啊，就是还是注意力问题，好多事都没来得及做。。。。。要提升工作状态的集中力，才有余力去做自己想做的事周五团建，就是野外随便嗨一嗨，不过无人机玩的还挺嗨，顺便解锁了vue技能，挺好玩的呀，成就感十足。。。。。。感觉周末可以自己租大疆出去嗨了呀周中看了会书，感觉不错，渐入节奏，最近听到90后消极的声音有点多，还是挺烦的，不过慢慢平稳了，也不知道是好是坏，坚定自己的强者之心呀感觉自己太贪了，什么都想要，还是要有点节奏，，，，，好处是最近不知道为啥心情变的不错，很奇怪，融入集体？还是怎么了，就是心情不错，很棒，自从陷入生命意义的迷茫之后，好久没有这么靓丽的感觉了，感觉精神上状态不一样了。。。。。。也许是看了过去的朋友圈，回想当时的状态，觉得很傻逼，突然就亮了起来哇。。。。。。。很好周中和小妹聊了会天，emmmmm，感觉有点想法的呀，其实还可以，我这个哥哥做的不是很好，不过我希望我能做好点，尽力吧，囧，聊得其实很开心。周末状态考虑到有工作而且有值周压力，就没出去浪了（可能是因为懒，反正没玩的心）本来打算加班了，可是起床真的有点晚就没去（其实也是懒）做了点事，搞了会视频，晚上去奥森跑了下步，体力下降的太严重了压，完全跑不动，阿西吧，要加强体质了啊。周日就更简单了，上午随便看了下，中午爆想吃火锅，发现没人，找了一圈，最后随便约了下，没约到，不过有妹子主动加了，约了晚饭，这个妹子爷不喜欢呀，说话捏着嗓子北京人还姓王，有点烦，不过还好，随便聊聊，没聊的很深入，总是回想起小姐姐，哈哈哈哈，还可以，心里没那么难受其实，就是简单想想。。。。。而且两天晚上都有lol直播，这个比赛还是挺好看的，nba现在已经没什么动力了，杜兰特凉了，确实看nba的欲望锐减，事实证明，虽然不想承认，不过我确实是杜兰特铁粉无疑了呀，这个比也是优秀，打球没得黑，其他随便黑，喜欢是多方面，始于颜值（球技），忠于人品，感觉他真啊，哈哈哈哈感想家里人还是不一样的，随便说都可以，保持本心早起计划有进步，周末至少还是有一半上午的，持续改进享受生命用阳光的心态去交友改变没那么难其实打分75分吧2019-11-04一周概况本周无事发生呀，依旧与早起做斗争，这个还是需要搞搞的，身体素质下降有点严重了啊，工作上试了下定量目标法，有所得，至少让自己找到了上班的状态。感觉工作上还是需要多用点心，尝试工作中进步。反而购买欲望十足，想要买电子设备，大疆玩的有点爽，导致我有点想拍点东西玩玩，耳机感觉还是可以买一买的啊，至于gopro，心动，不过还是先看看吧，随着雪季来临，不是很淡定了呀。。。。。本周是10月的最后一周，例行资产清理，嗯，更加增强了购买欲了呀，离百万计划还是不远的了，问题是百万之后呢？我有什么需要呢？目标呢？这个问题一直不愿意去想其实也是在的，本来就是觉得有钱才能给我自由，既然没有宏远的目标那就先挣钱，不过挣钱的时候也别忘了保护好自己的身体，明显感觉体能的衰退了。。。。。。看了下围棋视频，惊艳到我了啊，真的有点优秀，可是学起来老是会懊恼，无意义的感觉总是会刺激着自己，现在想想，入神入迷多难啊，还不学着享受，如果不能做到享受，那你还在做什么呢，还不如去做你觉得有意义有用的事周末周六还是选择去了一个穿越石虎线，其实就是爬山，天气一般，见到老朋友还是很开心的，就是时间太短，不能深入聊天，友谊程度不是很高。。。。。还有一个尴尬的事，看到一个湖南的妹子，性格很对我口味，想着加一下微信，结果加错了人？？？？我始终觉得那个妹子在忽悠我，应该不能，反正无缘，其实这就很可怕了，我应该大胆一点，直接加的啊。。。。。。冰火团貌似年轻妹子比较多，野狼貌似是老年俱乐部？不知道，反正很秀还看了几部电影，本周就有看，乱七八糟的，韩国的那个检查官还不错，挺有力量看了一部美丽心灵，很晚看的，其实很好，可惜脑子已经不转了，观影效果不好看了综艺奇葩说，千呼万唤始出来哇，还是有点味道的，发现现在看辩论，已经可以辩证的看了，不过还是做不到把自己设立到场景中去，完全参与不了这个级别的辩论。。。。。。。看了lol 比赛，看的有点嗨，比赛真的好看，讲道理，还是有反复看的习惯，也不能说好还是说坏，就是感觉是懵的周日又是昏睡了，下午吃个饭，补了下信用卡，又心血来潮去打了个球，真的有点烦了啊，很笨重，不会打球了，不会突破，不会投篮。。。。。感想看见还算有意思的妹子，还是要勇敢一点，学着厚脸皮吧，估计大声说话是没用的。。。。。加强一下锻炼哈早起计划真的要提上日程了啊懵逼状态真的要好好反思啊下次出去玩写一个单章吧，阔以尝试配个图啥的看看能写成啥样打分70分2019-11-11一周概况工作进度还算ok，其他滑水真的感觉自己注意力很是问题，麻木，低效率，神烦延迟症状迟迟不好周末周六玩了一天狼人，认识一个看着不错的小姐姐，终于能鼓起勇气去加了个微信，聊得还算不尬吧。。。。。周日堕落的一天，出去吃个饭，看了下头盔就回家shopping了，周日看着不忙，其实很忙，双11购物，lol比赛，看小丑，不过注意力就是集中不了，导致电影看得稀稀拉拉，嗯，最后连周报都没写，安排自己安排的有毒啊感想玩的是真嗨，其实卖出哪一步也没那么难，果然我是个喜好分明的人，不过第一印象害死人啊，后续改进，想了一个新的记录方式，感觉会不错，下周开始沿用，李敖式日记大法。看书还得坚持，一不留神就丢了这个还没养成的习惯。看电影感觉自己还是确实了好多想法，就是认知不够明确打分68分2019-11-11一周概况11-11 双11半夜购物，上班完成上线沟通，新需求对接，大部分时间聊天滑水，回家玩游戏无所事事等待时间消失11-12 debug配合测试，看电影11-13 配合压测，报警配置11-14 新接口梳理11-15 接口对接，滑水11-16 和朋友看情景喜剧，三里屯听歌看妹子11-17 与同学见面，撸猫，吃饭，回家看电影，与爸妈视频，和小妹电话，简单沟通感想本周滑水严重，对此严重批评人的惰性真的很严重，看着自己慢慢腐朽的感觉真的可怕周末走出门去，在郁郁的天气中寻找欢乐与宁静，甚好，与老友见面，聊天，甚欢需要安排自己，自由可不是随波逐流用路上的时间看书，回家反而完全没了看书的状态，有毒书籍看了有想法，忘了， 甚傻 随手记下自己的点滴想法勤思考，多思考，为独立而精致的灵魂而战打分652019-11-18","categories":[{"name":"生活","slug":"生活","permalink":"http://sevjoker.github.io/categories/生活/"}],"tags":[{"name":"记录","slug":"记录","permalink":"http://sevjoker.github.io/tags/记录/"}]},{"title":"消失的panic","slug":"gopanic","date":"2019-10-13T16:08:08.000Z","updated":"2019-10-13T16:14:02.050Z","comments":true,"path":"2019/10/14/gopanic/","link":"","permalink":"http://sevjoker.github.io/2019/10/14/gopanic/","excerpt":"","text":"消失的panic现场线上运行142行 报panic线下模拟不复现线上模拟不复现复现之旅并发压测尝试后发现会出现这种case问题发现之旅尝试1第一认知 以为panic的原因是MultiDayTypeConfig 或者 MultiDayTypeConfig.d 为nil，故在程序中打印这两个值，看是否有nil，并发压测复现问题未曾发现log中有任何 nil输出失败尝试2怀疑是否会有并发读写该值的情况导致nil，故将程序中所有关于该值得写入口注释（除了程序启动时），并发测试，panic依旧失败尝试3因为涉及并发，考虑可能会牵扯数据竞争问题, 所以编译时加入 -race 参数看改值是否存在竞争情况，并发模拟，data race log比较多，过滤筛选并未发现 MultiDayTypeConfig相关的日志，而且加race参数后 协程数量不可超过8192，此时未复现问题，（log中有 不少关于 context.TripCountry 的日志）失败尝试4抱着试一试的心态，当时以为会不会是 interface 在层层函数传递时候发生了意料之外的情况，将函数改写如下并发模拟 未复现问题 （amazing）瞎猫碰到死耗子尝试5认为这个毫无道理可言，而且这么改写也不科学，继续挖。看着data race的log，突发尝试，将context的TripCountry得修改放在并发外并发模拟尝试，未复现问题bug 修复But 可是并发写入string 理论上并不会crash，而且最终的nil造成原因我们还是一无所知黎明前意外之喜偶然尝试 在GetDayTypeByMemory 中添加recover 尝试捕获第一现场，在recover中打印 MultiDayTypeConfig.d MultiDayTypeConfig 及 countryCode，将外层的recover 去除，目的是为了并发下打印污染，希望能直接看到panic现场内容意外发现 recover中的 fmt.Println 二次panic分开打印，居然发现是打印 countryCode 的时候 panicWhat the fxxk！！！！漫漫猜测路大概了解了一下golang string 运行时底层本质上是这么一个结构1234type StringHeader struct &#123; Data uintptr Len int&#125;Data代表string数据的首地址，len 代表字节长度猜测1怀疑在并发写入这个string的时候，协程1传递到函数的值 被协程2修改导致协程1 的string被gc（理论上这个时候协程1的值有句柄在函数栈上，不过数据存在堆上，到底会不会被gc，值得试一下），线下写了一个并发写入string 主动调用gc的 demo并不能复现 panic失败继续尝试考虑是否可以打印 countryCode 的首地址，看是否有变化及差异。代码如下所示复现问题后输出如下所示-------------------------------------data:00000000-------len:2OMG！！！数据地址为空？ 长度为不为0 ？？？？这个地方就解释了为啥 fmt 也会nil panic这个string 只要涉及取值操作就回 nil panic线下模拟并发写入struct的string再输出模拟失败（中间尝试切换go版本保证线下线上环境一致均失败）ok panic中间还有个小误会，开始用1.8 跑的时候 跑了好久没panic 以为版本差异会导致panic后来才发现 1.8 只不过稳定的时候长很多，panic该来还是会来的后续汇编分析Len Data 分开赋值 多条指令。并发场景并不安全简化版本处理结论并发场景赋值的不安全性学习巩固知识点golang 的 stringgolang gc堆与栈golang data race","categories":[{"name":"技术","slug":"技术","permalink":"http://sevjoker.github.io/categories/技术/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://sevjoker.github.io/tags/golang/"}]},{"title":"myself","slug":"myself","date":"2019-10-13T15:31:04.000Z","updated":"2019-10-20T16:11:21.065Z","comments":true,"path":"2019/10/13/myself/","link":"","permalink":"http://sevjoker.github.io/2019/10/13/myself/","excerpt":"","text":"myself当我回首往事的时候，不会因虚度年华而悔恨，也不会因碌碌无为而羞愧！回首https://www.processon.com/view/link/5da344f7e4b0ece757c9c6a0写周末日记，记录点滴把想法看法记录一下展望我一直崇尚自由，然鹅却浑身不自在，或许应该做出点改变。。。。。也许真的自律方可自由要有靶心才能射箭，想了下，我想做个什么样的人，我希望自己能做一个有独立思想的人，对事对物都有自己的认识，有自己的底线，在这个认识和底线下我是自由的Q&amp;A怎么钱财自由 （）定期清理资产视野放开点个人感觉 基于2 方可实现1 啊怎么才能做一个有独立思想的人别做快享受的事，延迟享受看书啊，经济学，哲学，杂书名著对自己好一点，吃饭慢一点，该享受的时候闭上眼好好享受无论你走什么路，做什么事，其实动脑才能有自己的认识炒股，工作，滑雪 带着脑子去做，去玩针对时间要求每周写个周末随笔，记录生活点滴，不追求文笔，随便记下尽可能接触女生，多尝试，学着不要脸2019 （10-21）看完三本点子书，看完一本实体书滑雪可刻滑将回首图形，技术world 完善好，其他部分 尽可能化好","categories":[{"name":"生活","slug":"生活","permalink":"http://sevjoker.github.io/categories/生活/"}],"tags":[{"name":"自省","slug":"自省","permalink":"http://sevjoker.github.io/tags/自省/"}]},{"title":"http长连接","slug":"长连接","date":"2019-10-13T14:40:49.000Z","updated":"2019-10-13T14:44:27.617Z","comments":true,"path":"2019/10/13/长连接/","link":"","permalink":"http://sevjoker.github.io/2019/10/13/长连接/","excerpt":"","text":"http长连接http特点简单快速灵活无连接 *限制每次连接只处理一个请求用完即断 （后期加入）无状态 *协议对于事务处理没有记忆能力每个请求都是独立的借助 Cookie Session 完成上下文联系支持B/S(Browser/Server) 及C/S(Client/Serve)模式Q 无连接的特性如何实现 长连接网络协议分层简介http 之 Keep-alive上图我们可以知道http 基于 tcp 协议。虽然http本身是无连接的，不过tcp是协议是完全面向连接具有强可靠性。故可以通过复用tcp连接的方式实现所谓的http长连接即HTTP长连接和短连接本质上是TCP长连接 和 短连接（握手说句话再见）实验模型基于 nginx 的 keepAlive 实验该场景下有两个地方可以完成http长连接配置针对10.10.7.179 &lt; - &gt; 10.9.71.78 进行分析抓包分析看包 说话短连接 不复用demo_no_keepalive_simple.cap长连接 复用tcp连接demo_keepalive_simple.cap小节nginx http长连接 配置netstat -nat | grep -i “10.9.71.78:6601”观察不同配置下tcp连接的不同变化upstream module 中location module 中http module 中按需配置####性能对比统一 nginx 单worker, server为简单的hello world服务禁用长连接启用http 长连接性能差异 达到 70%+ （这个压测结果应该算是极限差距吧。按server耗时与传输占比来算）适用场景长连接多用于操作频繁，点对点的通讯，而且连接数不能太多情况WEB网站的http服务一般都用短链接选则法则：面向”用户多少”选择","categories":[{"name":"技术","slug":"技术","permalink":"http://sevjoker.github.io/categories/技术/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://sevjoker.github.io/tags/golang/"}]},{"title":"hexo踩坑","slug":"hexo踩坑","date":"2019-10-13T13:51:09.000Z","updated":"2019-10-13T15:30:43.550Z","comments":true,"path":"2019/10/13/hexo踩坑/","link":"","permalink":"http://sevjoker.github.io/2019/10/13/hexo踩坑/","excerpt":"","text":"hexo年关将至，目标还差的很远啊~~~简单整理一下这些年自己的经历画成图谱（后续完善细节）嗯，发现可以做，要做的事有好多好多，多想能活500年哇慢慢来吧，先把blog捡起来。。。。。把 hexo 的坑统一汇总下，之前搞懂了又忘了。。。。。hexo 简介写blog的神器，看中了他兼容markdown语法且github托管hexo基于nodejs，将markdown可以直接编译成html，同时支持直接托管到github上，所以hexo的包管理均由npm管理。hexo托管git需要绑定name.github.io的仓库，托管后改仓库的master即为编译后的html文件。环境保存方案name.github.io 代码库 新建一个分支，存储所有文件，提交。所以仓库结构就是master 托管 编译完的html文件，由hexo命令管理新建分支托管其他所有文件，有git命令管理命令相关hexo清理本地空间 hexo clean编译生成html hexo g本地服务 hexo s发布托管到git hexo d一键部署命令(编译并发布) hexo g -dnpm包管理检测本地js包情况 npm ls --depth 0下载安装 npm install packagename --save检测项目依赖中的漏洞并自动安装 npm audit fix报错处理git 提交失败https 改为 git模式push","categories":[{"name":"技术","slug":"技术","permalink":"http://sevjoker.github.io/categories/技术/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://sevjoker.github.io/tags/blog/"}]},{"title":"golang踩坑","slug":"golang踩坑","date":"2019-04-20T17:54:02.000Z","updated":"2019-10-13T14:05:40.629Z","comments":true,"path":"2019/04/21/golang踩坑/","link":"","permalink":"http://sevjoker.github.io/2019/04/21/golang踩坑/","excerpt":"","text":"golang 线上问题汇总定时器现象线上cpu不定时抖动问题发现大量go协程启用了NewTicker 而未主动关闭，而ticker对象会默认存储在一个最小堆上，todo问题总结time.After vs time.NewTicker 区分使用concurrent map iteration and map write现象线上服务直接崩溃问题发现并发读写map引起不是一个panic 无法被 recoverThis means that the Go runtime may detect if a map is read or modified in a goroutine, and it is also modified by another goroutine, concurrently, without synchronization.问题解决锁处理sync.Map问题衍生当一个 map被json encode时也会导致此问题（等同于读操作）问题复原及深究单层map123456789101112131415161718192021222324252627282930313233343536package mainimport ( &quot;time&quot; &quot;fmt&quot; &quot;sync&quot;)var m = make(map[string]string) //wrongvar sm = &amp;sync.Map&#123;&#125; // rightfunc main() &#123; sm.Store(&quot;x&quot;,&quot;aaa&quot;) m[&quot;x&quot;] = &quot;aaa&quot; sm.Store(&quot;x&quot;, m) go func() &#123; if err1 := recover(); err1 != nil &#123; return &#125; for &#123; m[&quot;x&quot;] = &quot;xxxx&quot; // sm.Store(&quot;x&quot;,&quot;bbbb&quot;) &#125; &#125;() go func() &#123; if err1 := recover(); err1 != nil &#123; return &#125; for &#123; _ = m[&quot;x&quot;] // v,ok := sm.Load(&quot;x&quot;) // sm.Store(&quot;x&quot;,&quot;bbbb&quot;) // fmt.Println(v,ok) &#125; &#125;() fmt.Println(&quot;----&quot;) time.Sleep(1 * time.Second)&#125;当写map时 无论并发去读还是去写都会fatal 且无法被捕获可用sync.Map 绝对安全多层map1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package mainimport ( &quot;time&quot; &quot;sync&quot; // &quot;fmt&quot;)type AA struct &#123; mu *sync.Mutex aa map[string]map[string]int&#125;func (a *AA)set(b int) &#123; a.mu.Lock() defer a.mu.Unlock() a.aa[&quot;aaa&quot;][&quot;aaa&quot;] = b&#125;func (a *AA)get() map[string]int &#123; a.mu.Lock() defer a.mu.Unlock() return a.aa[&quot;aaa&quot;] &#125;var sm = &amp;sync.Map&#123;&#125; func main() &#123; sm.Store(&quot;aaa&quot;,map[string]string&#123;&quot;aaa&quot;:&quot;aaa&quot;&#125;) // a := &amp;AA&#123;aa:map[string]map[string]int&#123;&quot;aaa&quot;:map[string]int&#123;&quot;aaa&quot;:1&#125;&#125;,mu:new(sync.Mutex)&#125; go func() &#123; if err1 := recover(); err1 != nil &#123; return &#125; for &#123; // a.set(123) v,_ := sm.Load(&quot;aaa&quot;) v1 := v.(map[string]string) // fmt.Println(v,v1,ok) v1[&quot;aaa&quot;] = &quot;bbb&quot; &#125; &#125;() go func() &#123; if err1 := recover(); err1 != nil &#123; return &#125; for &#123; // v := a.get() // _ = v[&quot;aaa&quot;] // v,ok := sm.Load(&quot;x&quot;) // sm.Store(&quot;x&quot;,&quot;bbbb&quot;) // fmt.Println(v,ok) v,_ := sm.Load(&quot;aaa&quot;) v1 := v.(map[string]string) // _ = v1[&quot;&quot;] _ = v1[&quot;aaa&quot;] // fmt.Sprintln(&quot;111&quot;,v1) // fmt.Println(v,v1,ok) &#125; &#125;() time.Sleep(10 * time.Second)&#125;多层map 无论是锁还是sync.Map都无可避免的会出现将底层的map句柄暴露给上层，继而引发同时读写错误结论当你操作的map可能存在同时读写的情况下就必须加锁读写操作必须都加锁即 存在数据竞争的map引用不可暴露给上层","categories":[{"name":"技术","slug":"技术","permalink":"http://sevjoker.github.io/categories/技术/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://sevjoker.github.io/tags/golang/"}]},{"title":"开卷有益","slug":"first","date":"2019-04-13T16:27:46.000Z","updated":"2019-11-11T19:08:42.975Z","comments":true,"path":"2019/04/14/first/","link":"","permalink":"http://sevjoker.github.io/2019/04/14/first/","excerpt":"","text":"随便记点啦好记忆不如烂笔头 何况如此懒得记东西的我1$ hello blog!立个flag每月至少一篇blog (all type)good good study, day day upyou need to know what are you doing ha~打卡健身2019-04-20LOL2019-04-202019-04-252019-05-012019-10-082019-10-092019-10-142019-10-192019-10-282019-11-042019-11-12 不爽 真的不爽啊TODO2019-04-22 golang deadline 寻密鸡汤没有人会为你真正的价值买单，他们只会为他们所认为的你的价值买单","categories":[{"name":"随便记","slug":"随便记","permalink":"http://sevjoker.github.io/categories/随便记/"}],"tags":[{"name":"随记","slug":"随记","permalink":"http://sevjoker.github.io/tags/随记/"}]}]}